'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.hasContent = hasContent;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function hasContent(val) {
  return _lodash2['default'].isString(val) && val !== "";
}

// return true if the the value is not undefined, null, or NaN.
function hasValue(val) {
  var hasVal = false;
  // avoid incorrectly evaluating `0` as false
  if (_lodash2['default'].isNumber(val)) {
    hasVal = !_lodash2['default'].isNaN(val);
  } else {
    hasVal = !_lodash2['default'].isUndefined(val) && !_lodash2['default'].isNull(val);
  }

  return hasVal;
}

// escape spaces in string, for commandline calls
function escapeSpace(str) {
  return str.split(/ /).join('\\ ');
}

function escapeSpecialChars(str, quoteEscape) {
  if (typeof str !== "string") {
    return str;
  }
  if (typeof quoteEscape === "undefined") {
    quoteEscape = false;
  }
  str = str.replace(/[\\]/g, '\\\\').replace(/[\/]/g, '\\/').replace(/[\b]/g, '\\b').replace(/[\f]/g, '\\f').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r').replace(/[\t]/g, '\\t').replace(/[\"]/g, '\\"').replace(/\\'/g, "\\'");
  if (quoteEscape) {
    var re = new RegExp(quoteEscape, "g");
    str = str.replace(re, '\\' + quoteEscape);
  }
  return str;
}

function localIp() {
  var ip = _lodash2['default'].chain(_os2['default'].networkInterfaces()).values().flatten().filter(function (val) {
    return val.family === 'IPv4' && val.internal === false;
  }).map('address').first().value();
  return ip;
}

/*
 * Creates a promise that is cancellable, and will timeout
 * after `ms` delay
 */
function cancellableDelay(ms) {
  var timer = undefined;
  return new _bluebird2['default'].Promise(function (resolve) {
    timer = setTimeout(function () {
      resolve();
    }, ms);
  }).cancellable()['catch'](_bluebird2['default'].CancellationError, function (err) {
    // eslint-disable-line promise/prefer-await-to-callbacks
    clearTimeout(timer);
    throw err;
  });
}

function multiResolve(roots) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return roots.map(function (root) {
    return _path2['default'].resolve.apply(_path2['default'], [root].concat(args));
  });
}

/*
 * Parses an object if possible. Otherwise returns the object without parsing.
 */
function safeJsonParse(obj) {
  try {
    obj = JSON.parse(obj);
  } catch (ign) {
    // ignore: this is not json parsable
  }
  return obj;
}

/*
 * Removes the wrapper from element, if it exists.
 *   { ELEMENT: 4 } becomes 4
 */
function unwrapElement(el) {
  if (typeof el === 'object' && el.ELEMENT) {
    return el.ELEMENT;
  }
  return el;
}

exports.hasValue = hasValue;
exports.escapeSpace = escapeSpace;
exports.escapeSpecialChars = escapeSpecialChars;
exports.localIp = localIp;
exports.cancellableDelay = cancellableDelay;
exports.multiResolve = multiResolve;
exports.safeJsonParse = safeJsonParse;
exports.unwrapElement = unwrapElement;
//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsQ0FBQztHQUNSLENBQUMsQ0FDRCxXQUFXLEVBQUUsU0FDUixDQUFDLHNCQUFFLGlCQUFpQixFQUFFLFVBQUMsR0FBRyxFQUFLOztBQUNuQyxnQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BCLFVBQU0sR0FBRyxDQUFDO0dBQ1gsQ0FBQyxDQUFDO0NBQ0o7O0FBRUQsU0FBUyxZQUFZLENBQUUsS0FBSyxFQUFXO29DQUFOLElBQUk7QUFBSixRQUFJOzs7QUFDbkMsU0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSSxFQUFLO0FBQ3pCLFdBQU8sa0JBQUssT0FBTyxNQUFBLHFCQUFDLElBQUksU0FBSyxJQUFJLEVBQUMsQ0FBQztHQUNwQyxDQUFDLENBQUM7Q0FDSjs7Ozs7QUFLRCxTQUFTLGFBQWEsQ0FBRSxHQUFHLEVBQUU7QUFDM0IsTUFBSTtBQUNGLE9BQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3ZCLENBQUMsT0FBTyxHQUFHLEVBQUU7O0dBRWI7QUFDRCxTQUFPLEdBQUcsQ0FBQztDQUNaOzs7Ozs7QUFNRCxTQUFTLGFBQWEsQ0FBRSxFQUFFLEVBQUU7QUFDMUIsTUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRTtBQUN4QyxXQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUM7R0FDbkI7QUFDRCxTQUFPLEVBQUUsQ0FBQztDQUNYOztRQUVRLFFBQVEsR0FBUixRQUFRO1FBQUUsV0FBVyxHQUFYLFdBQVc7UUFBRSxrQkFBa0IsR0FBbEIsa0JBQWtCO1FBQUUsT0FBTyxHQUFQLE9BQU87UUFBRSxnQkFBZ0IsR0FBaEIsZ0JBQWdCO1FBQ3BFLFlBQVksR0FBWixZQUFZO1FBQUUsYUFBYSxHQUFiLGFBQWE7UUFBRSxhQUFhLEdBQWIsYUFBYSIsImZpbGUiOiJsaWIvdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDb250ZW50ICh2YWwpIHtcbiAgcmV0dXJuIF8uaXNTdHJpbmcodmFsKSAmJiB2YWwgIT09IFwiXCI7XG59XG5cbi8vIHJldHVybiB0cnVlIGlmIHRoZSB0aGUgdmFsdWUgaXMgbm90IHVuZGVmaW5lZCwgbnVsbCwgb3IgTmFOLlxuZnVuY3Rpb24gaGFzVmFsdWUgKHZhbCkge1xuICBsZXQgaGFzVmFsID0gZmFsc2U7XG4gIC8vIGF2b2lkIGluY29ycmVjdGx5IGV2YWx1YXRpbmcgYDBgIGFzIGZhbHNlXG4gIGlmIChfLmlzTnVtYmVyKHZhbCkpIHtcbiAgICBoYXNWYWwgPSAhXy5pc05hTih2YWwpO1xuICB9IGVsc2Uge1xuICAgIGhhc1ZhbCA9ICFfLmlzVW5kZWZpbmVkKHZhbCkgJiYgIV8uaXNOdWxsKHZhbCk7XG4gIH1cblxuICByZXR1cm4gaGFzVmFsO1xufVxuXG4vLyBlc2NhcGUgc3BhY2VzIGluIHN0cmluZywgZm9yIGNvbW1hbmRsaW5lIGNhbGxzXG5mdW5jdGlvbiBlc2NhcGVTcGFjZSAoc3RyKSB7XG4gIHJldHVybiBzdHIuc3BsaXQoLyAvKS5qb2luKCdcXFxcICcpO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVTcGVjaWFsQ2hhcnMgKHN0ciwgcXVvdGVFc2NhcGUpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIGlmICh0eXBlb2YgcXVvdGVFc2NhcGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBxdW90ZUVzY2FwZSA9IGZhbHNlO1xuICB9XG4gIHN0ciA9IHN0clxuICAgICAgICAucmVwbGFjZSgvW1xcXFxdL2csICdcXFxcXFxcXCcpXG4gICAgICAgIC5yZXBsYWNlKC9bXFwvXS9nLCAnXFxcXC8nKVxuICAgICAgICAucmVwbGFjZSgvW1xcYl0vZywgJ1xcXFxiJylcbiAgICAgICAgLnJlcGxhY2UoL1tcXGZdL2csICdcXFxcZicpXG4gICAgICAgIC5yZXBsYWNlKC9bXFxuXS9nLCAnXFxcXG4nKVxuICAgICAgICAucmVwbGFjZSgvW1xccl0vZywgJ1xcXFxyJylcbiAgICAgICAgLnJlcGxhY2UoL1tcXHRdL2csICdcXFxcdCcpXG4gICAgICAgIC5yZXBsYWNlKC9bXFxcIl0vZywgJ1xcXFxcIicpXG4gICAgICAgIC5yZXBsYWNlKC9cXFxcJy9nLCBcIlxcXFwnXCIpO1xuICBpZiAocXVvdGVFc2NhcGUpIHtcbiAgICBsZXQgcmUgPSBuZXcgUmVnRXhwKHF1b3RlRXNjYXBlLCBcImdcIik7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UocmUsIGBcXFxcJHtxdW90ZUVzY2FwZX1gKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiBsb2NhbElwICgpIHtcbiAgbGV0IGlwID0gXy5jaGFpbihvcy5uZXR3b3JrSW50ZXJmYWNlcygpKVxuICAgIC52YWx1ZXMoKVxuICAgIC5mbGF0dGVuKClcbiAgICAuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiAodmFsLmZhbWlseSA9PT0gJ0lQdjQnICYmIHZhbC5pbnRlcm5hbCA9PT0gZmFsc2UpO1xuICAgIH0pXG4gICAgLm1hcCgnYWRkcmVzcycpXG4gICAgLmZpcnN0KClcbiAgICAudmFsdWUoKTtcbiAgcmV0dXJuIGlwO1xufVxuXG4vKlxuICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCBpcyBjYW5jZWxsYWJsZSwgYW5kIHdpbGwgdGltZW91dFxuICogYWZ0ZXIgYG1zYCBkZWxheVxuICovXG5mdW5jdGlvbiBjYW5jZWxsYWJsZURlbGF5IChtcykge1xuICBsZXQgdGltZXI7XG4gIHJldHVybiBuZXcgQi5Qcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9LCBtcyk7XG4gIH0pXG4gIC5jYW5jZWxsYWJsZSgpXG4gIC5jYXRjaChCLkNhbmNlbGxhdGlvbkVycm9yLCAoZXJyKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB0aHJvdyBlcnI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtdWx0aVJlc29sdmUgKHJvb3RzLCAuLi5hcmdzKSB7XG4gIHJldHVybiByb290cy5tYXAoKHJvb3QpID0+IHtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHJvb3QsIC4uLmFyZ3MpO1xuICB9KTtcbn1cblxuLypcbiAqIFBhcnNlcyBhbiBvYmplY3QgaWYgcG9zc2libGUuIE90aGVyd2lzZSByZXR1cm5zIHRoZSBvYmplY3Qgd2l0aG91dCBwYXJzaW5nLlxuICovXG5mdW5jdGlvbiBzYWZlSnNvblBhcnNlIChvYmopIHtcbiAgdHJ5IHtcbiAgICBvYmogPSBKU09OLnBhcnNlKG9iaik7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIC8vIGlnbm9yZTogdGhpcyBpcyBub3QganNvbiBwYXJzYWJsZVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qXG4gKiBSZW1vdmVzIHRoZSB3cmFwcGVyIGZyb20gZWxlbWVudCwgaWYgaXQgZXhpc3RzLlxuICogICB7IEVMRU1FTlQ6IDQgfSBiZWNvbWVzIDRcbiAqL1xuZnVuY3Rpb24gdW53cmFwRWxlbWVudCAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ29iamVjdCcgJiYgZWwuRUxFTUVOVCkge1xuICAgIHJldHVybiBlbC5FTEVNRU5UO1xuICB9XG4gIHJldHVybiBlbDtcbn1cblxuZXhwb3J0IHsgaGFzVmFsdWUsIGVzY2FwZVNwYWNlLCBlc2NhcGVTcGVjaWFsQ2hhcnMsIGxvY2FsSXAsIGNhbmNlbGxhYmxlRGVsYXksXG4gICAgICAgICBtdWx0aVJlc29sdmUsIHNhZmVKc29uUGFyc2UsIHVud3JhcEVsZW1lbnQgfTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
